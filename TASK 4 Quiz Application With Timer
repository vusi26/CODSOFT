import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class QuizApplicationWithTimer extends JFrame {
    private JLabel questionLabel;
    private JRadioButton[] options;
    private JButton submitButton;
    private JLabel timerLabel;
    private Timer timer;

    private ArrayList<Question> questions;
    private int currentQuestionIndex;
    private int score;

    public QuizApplicationWithTimer(String title, ArrayList<Question> questions) {
        setTitle(title);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600, 300);
        setLayout(new BorderLayout());

        this.questions = questions;
        currentQuestionIndex = 0;

        questionLabel = new JLabel();
        add(questionLabel, BorderLayout.NORTH);

        JPanel optionsPanel = new JPanel(new GridLayout(4, 1));
        options = new JRadioButton[4];
        ButtonGroup buttonGroup = new ButtonGroup();
        for (int i = 0; i < 4; i++) {
            options[i] = new JRadioButton();
            buttonGroup.add(options[i]);
            optionsPanel.add(options[i]);
        }
        add(optionsPanel, BorderLayout.CENTER);

        submitButton = new JButton("Submit");
        add(submitButton, BorderLayout.SOUTH);

        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                checkAnswer();
                showNextQuestion();
            }
        });

        timerLabel = new JLabel();
        add(timerLabel, BorderLayout.EAST); 

        showQuestion();
        startTimer();
    }

    private void showQuestion() {
        Question currentQuestion = questions.get(currentQuestionIndex);
        questionLabel.setText(currentQuestion.getQuestion());
        String[] currentOptions = currentQuestion.getOptions();
        for (int i = 0; i < Math.min(currentOptions.length,options.length);i++){
            options[i].setText(currentOptions[i]);
            options[i].setSelected(false);
        }
    }

    private void showNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.size()) {
            showQuestion();
            resetTimer();
        } else {
            showResult();
        }
    }

    private void checkAnswer() {
        Question currentQuestion = questions.get(currentQuestionIndex);
        int selectedOptionIndex = getSelectedOptionIndex();
        if (selectedOptionIndex != -1 && selectedOptionIndex == currentQuestion.getCorrectOptionIndex()) {
            score++;
        }
    }

    private int getSelectedOptionIndex() {
        for (int i = 0; i < options.length;i++) {
            if (options[i].isSelected()) {
                return i;
            }
        }
        return -1; 
    }

    private void showResult() {
        JOptionPane.showMessageDialog(this, "Quiz Completed!\nScore: " + score + "/" + questions.size());
        System.exit(0);
    }

    private void startTimer() {
        timer = new Timer(1000, new ActionListener() { 
            private int secondsLeft = 15; 

            @Override
            public void actionPerformed(ActionEvent e) {
                if (secondsLeft >= 0) {
                    timerLabel.setText("Time left: " + secondsLeft + " seconds");
                    secondsLeft--;
                } else {
                    timer.stop();
                    checkAnswer();
                    showNextQuestion();
                }
            }
        });
        timer.start();
    }

    private void resetTimer() {
        timer.stop();
        startTimer();
    }

    public static void main(String[] args) {
        ArrayList<Question> questions = new ArrayList<>();
        
        questions.add(new Question("what is the official language for android development?", new String[]{"Java", "kotlin", "C++", "Javascript"}, 2));
        questions.add(new Question("What kind of variables a class can consist of?", new String[]{"A- class variables,instance variables","local variables",}, 1));
        questions.add(new Question("What is the largest planet in our solar system?", new String[]{"Earth", "Jupiter", "Mars", "Venus"}, 1));

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new QuizApplicationWithTimer("Quiz Application", questions).setVisible(true);
            }
        });
    }
}

class Question {
    private String question;
    private String[] options;
    private int correctOptionIndex;

    public Question(String question, String[] options, int correctOptionIndex) {
        this.question = question;
        this.options = options;
        this.correctOptionIndex = correctOptionIndex;
    }

    public String getQuestion() {
        return question;
    }

    public String[] getOptions() {
        return options;
    }

    public int getCorrectOptionIndex() {
        return correctOptionIndex;
    }
}
